[tool.poetry]
name = "python-backend"
version = "0.1.0"
description = "Backend project for our recommender system"
authors = ["Kevin Heinrich <kevin.heinrich@student.tugraz.at>",
           "Matthias Hemmer <matthias.hemmer@student.tugraz.at>",
           "Christina Knes <christina.knes@student.tugraz.at>",
           "Fiona Trapp <fiona.trapp@student.tugraz.at>"]
readme = "README.md"
packages = [
            {include = "FastDineAPI", from="src"},
            {include = "DineFinderAI", from="src"},
            {include = "QueryGenerator", from="src"},
            {include = "Analyser", from="src"}
            ]

[tool.poetry.dependencies]
python = "^3.12"
fastapi = "^0.115.5"
uvicorn = "^0.32.1"
pyyaml = "^6.0.2"
pandas = "^2.2.3"
transformers = "^4.47.1"
torch = "^2.5.1"
accelerate = "^1.2.1"
scikit-learn = "^1.6.0"
matplotlib = "^3.10.0"
poetry = "1.8.5"

[tool.poetry.scripts]
start = "FastDineAPI.app:start"
ingest = "DineFinderAI.db.DatabaseManager:main"
generate_basic = "QueryGenerator.QueryGenerator:generate_basic"
generate_enhanced= "QueryGenerator.QueryGenerator:generate_enhanced"
training = "DineFinderAI.main:main"
sem = "DineFinderAI.models.SentimentModelTrainer:main"
analyse_queries = "Analyser.analyze_queries:main"
analyse_db = "Analyser.DatabaseAnalyser:main"
analyse_runtime = "Analyser.RuntimeAnalyser:main"
analyse_training = "Analyser.TrainingAnalyser:main"

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"


[tool.ruff]
# Exclude a variety of commonly ignored directories.
exclude = [
    ".bzr",
    ".direnv",
    ".eggs",
    ".git",
    ".git-rewrite",
    ".hg",
    ".ipynb_checkpoints",
    ".mypy_cache",
    ".nox",
    ".pants.d",
    ".pyenv",
    ".pytest_cache",
    ".pytype",
    ".ruff_cache",
    ".svn",
    ".tox",
    ".venv",
    ".vscode",
    "__pypackages__",
    "_build",
    "buck-out",
    "build",
    "dist",
    "node_modules",
    "site-packages",
    "venv",
]

line-length = 120
indent-width = 2

target-version = "py312"

[tool.ruff.lint]
# Enable Pyflakes (`F`) and a subset of the pycodestyle (`E`)  codes by default.
# Unlike Flake8, Ruff doesn't enable pycodestyle warnings (`W`) or
# McCabe complexity (`C901`) by default.
select = ["E4", "E7", "E9", "F"]
ignore = []

# Allow fix for all enabled rules (when `--fix`) is provided.
fixable = ["ALL"]
unfixable = []

# Allow unused variables when underscore-prefixed.
dummy-variable-rgx = "^(_+|(_+[a-zA-Z0-9_]*[a-zA-Z0-9]+?))$"

[tool.ruff.format]
# Like Black, use double quotes for strings.
quote-style = "double"

# Like Black, indent with spaces, rather than tabs.
indent-style = "space"

# Like Black, respect magic trailing commas.
skip-magic-trailing-comma = false

# Like Black, automatically detect the appropriate line ending.
line-ending = "auto"

# Enable auto-formatting of code examples in docstrings. Markdown,
# reStructuredText code/literal blocks and doctests are all supported.
#
# This is currently disabled by default, but it is planned for this
# to be opt-out in the future.
docstring-code-format = false

# Set the line length limit used when formatting code snippets in
# docstrings.
#
# This only has an effect when the `docstring-code-format` setting is
# enabled.
docstring-code-line-length = "dynamic"